import bpy


# Select the base mesh object and the sphere
base_object = bpy.data.objects['Suzanne'] # Replace 'BaseObject' with the name of your base object
initial_sphere = bpy.data.objects['Sphere'] # Replace 'Sphere' with the name of your initial sphere object

# Shrinkwrap offset
shrinkwrap_offset = 0.001 #Adjust this value as needed

# Number of iterations
num_iterations = 5

# Remesh settings
remesh_octree_depth = 9
remesh_scale = 0.9

# Start with the initial sphere
sphere_object = initial_sphere

# Iterate through the desired number of iterations
for i in range(num_iterations):
    #Duplicate the sphere
    duplicated_sphere = sphere_object.copy()
    duplicated_sphere.data = sphere_object.data.copy()
    bpy.context.collection.objects.link(duplicated_sphere)

    # Apply Shrinkwrap modifier to the duplicated sphere
    shrinkwrap_modifier = duplicated_sphere.modifiers.new(name='Shrinkwrap', type='SHRINKWRAP')
    shrinkwrap_modifier.target = base_object
    shrinkwrap_modifier.wrap_mode = 'ON_SURFACE'
    shrinkwrap_modifier.wrap_method = 'NEAREST_SURFACEPOINT'
    shrinkwrap_modifier.offset = shrinkwrap_offset
   
    # Apply the modifier
    bpy.context.view_layer.objects.active = duplicated_sphere
    bpy.ops.object.modifier_apply(modifier=shrinkwrap_modifier.name)

    # Apply Smooth Remesh modifier
    remesh_modifier = duplicated_sphere.modifiers.new(name='Remesh', type='REMESH')
    remesh_modifier.octree_depth = remesh_octree_depth
    remesh_modifier.scale = remesh_scale
    remesh_modifier.mode = 'SMOOTH' # Set to SMOOTH mode

    # Apply the modifier
    bpy.ops.object.modifier_apply(modifier=remesh_modifier.name)

    # Update the sphere object to the newly shrunken and remeshed sphere for the next iteration
    sphere_object = duplicated_sphere


# Rename the final shrunken sphere
sphere_object.name = 'FinalShrunkenSphere'

##Apply final smoothing modifier
#smoothing_modifier = sphere_object.modifiers.new(name='Smooth', type='SMOOTH')
#smoothing_modifier.factor = 1.8
#smoothing_modifier.iterations = 30

#bpy.ops.object.modifier_apply(modifier=smoothing_modifier.name)

##Apply final decimate modifier
#decimate_modifier = sphere_object.modifiers.new(name='Decimate', type='DECIMATE')
#decimate_modifier.decimate_type = 'COLLAPSE'
#decimate_modifier.ratio = 0.25

#bpy.ops.object.modifier_apply(modifier=decimate_modifier.name)

print("Process completed.")