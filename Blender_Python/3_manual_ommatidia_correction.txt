import bpy, csv, math
from math import pi
# PC1,PC2,PC3,group,col
col_num = 4

radius = 0.0025
text_resize = 0.2  
tick_resize = 4

camera_type = 'PERSP' # 'ORTHO' 'PERSP'

def hex2col(hex, normalize=False, precision=None):
    col = []
    it = iter(hex)
    for char in it:
        col.append(int(char + it.__next__(), 16))
        
                
    if normalize:
        col = map(lambda x: x / 255, col)
        
        if precision is not None:
            col = map(lambda x: round(x, precision), col)
                
    return list(col)


## select all
#bpy.ops.object.select_all(action='SELECT')

## remove all
#bpy.ops.object.delete(use_global=False, confirm=False)

file = csv.reader(open('X:/Pub/2021/_Ruehr_AntVision/data/3_triangle_centers_and_normals/pre_correction/AV00022_Crematogaster_pimicola_DICOM_eye2_surface.csv', newline=''), delimiter=',')

print(file)

#bpy.ops.material.new()
#bpy.data.materials["Material"].node_tree.nodes["Principled BSDF"].inputs[0].default_value = (0, 0, 0, 1)

print("Importing ommatidia coordinate data - this might take a bit...")
for idx, row in enumerate(file):
#    print(idx, row)
    if idx > 0:
        
        x = float(row[0])
        y = float(row[1])
        z = float(row[2])

        bpy.ops.mesh.primitive_uv_sphere_add( location = ( x/1000, y/1000, z/1000 ),
            segments=16, ring_count=8, radius=radius)

        ob = bpy.context.object
        ob.name = row[3]
        
        me = ob.data
        
        curr_material = 'Material_'+str(idx)
        curr_col = "67032F" # row[col_num][1:7]
        curr_RGB_ = hex2col(curr_col)
        curr_RGB = [x / 255 for x in curr_RGB_]
        # print(curr_material, ': Hex#', curr_col,  ' --> RGB ', curr_RGB)
        curr_RGB.append(1)
        # print(curr_RGB)
        
        mat = bpy.data.materials.new(name=curr_material)
        mat.diffuse_color = curr_RGB
        me.materials.append(mat)
		
		print(idx)

print("All done!")